(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{249:function(t,a,n){"use strict";n.r(a);var s=n(28),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据结构-算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-算法"}},[t._v("#")]),t._v(" 数据结构&算法")]),t._v(" "),n("h2",{attrs:{id:"数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("按逻辑结构分类\n集合(无逻辑关系)\n线性结构(线性表，一对一的关系)\n一维数组\n队列\n栈\n非线性结构\n树\n图\n多维数组(c c++中的多维数组)")])]),t._v(" "),n("li",[n("p",[t._v("按存储结构分类\n顺序存储结构(连续的存储空间)\n链式存储结构(存储空间不连续，指针指向下一个元素)\n索引存储结构(典型map，由两部分组成：key和value，通过key找到value)\n散列存储结构(元素之间无联系，用于堆)")])]),t._v(" "),n("li",[n("p",[t._v("逻辑--理论->存储：\n**线性[表、栈、队列、串]**"),n("em",[t._v("精")]),t._v("--理论->"),n("strong",[t._v("顺序、链接、散列、索引")]),t._v("\n**树[二叉树、森林]*"),n("em",[t._v("明白")]),t._v("----理论->"),n("strong",[t._v("内存、外存(可忽略)")]),t._v("\n**图[有向、无向、DAG]*"),n("em",[t._v("了解")]),t._v("--理论->"),n("strong",[t._v("外排序、B+树、倒排")])])]),t._v(" "),n("li",[n("p",[t._v("基本数据结构及衍生结构")])])]),t._v(" "),n("ol",[n("li",[t._v("集合：同一元素出现一次， js中set")]),t._v(" "),n("li",[t._v("线性结构：数组（除了第一个和最后一个，其他位置都有一个前驱和一个后继，一一对应(朝一个方向取)）")]),t._v(" "),n("li",[t._v("树状结构：层级，一对多")]),t._v(" "),n("li",[t._v("图(网状结构)")])]),t._v(" "),n("ul",[n("li",[t._v("线性表实现：顺序存储 链式存储")])]),t._v(" "),n("h2",{attrs:{id:"算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),n("ul",[n("li",[t._v("基本特征")])]),t._v(" "),n("ol",[n("li",[t._v("有穷性")]),t._v(" "),n("li",[t._v("确切性")]),t._v(" "),n("li",[t._v("输入项")]),t._v(" "),n("li",[t._v("输出项")]),t._v(" "),n("li",[t._v("可行性")])]),t._v(" "),n("ul",[n("li",[t._v("衡量算法好坏")])]),t._v(" "),n("ol",[n("li",[t._v("复杂度：时间复杂度；空间复杂度")]),t._v(" "),n("li",[t._v("正确性")]),t._v(" "),n("li",[t._v("可读性")]),t._v(" "),n("li",[t._v("健壮性")])]),t._v(" "),n("ul",[n("li",[t._v("必须掌握的基本算法")])]),t._v(" "),n("ol",[n("li",[t._v("枚举")]),t._v(" "),n("li",[t._v("递归")]),t._v(" "),n("li",[t._v("基本排序")]),t._v(" "),n("li",[t._v("基本查找")])]),t._v(" "),n("h3",{attrs:{id:"枚举算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举算法"}},[t._v("#")]),t._v(" 枚举算法")]),t._v(" "),n("p",[t._v("核心思想：枚举所有的可能\n满足条件：1. 可预先确定候选答案的数量\n2. 候选答案的范围在求解之前必须有一个确定的集合\n特点：1. 简单粗暴，暴力枚举所有可能，尽可能的尝试所有方法\n2. 速度可能很慢\n3. 实现最简单，并且得到的结果总是正确的")]),t._v(" "),n("h3",{attrs:{id:"递归算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归算法"}},[t._v("#")]),t._v(" 递归算法")]),t._v(" "),n("p",[t._v("核心思想：通过重复将问题分解为同类子问题而解决问题的方法\n特点：1. 函数可以通过调用自身来进行递归\n2. 递归可以完全取代循环\n组成部分：1. 递归主题，即循环解决问题的代码\n2. 递归的跳出条件，不能一直递归下去，需要完成一定条件后跳出")]),t._v(" "),n("h3",{attrs:{id:"排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[t._v("#")]),t._v(" 排序算法")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("排序法")]),t._v(" "),n("th",[t._v("最佳时间复杂度")]),t._v(" "),n("th",[t._v("平均时间复杂度")]),t._v(" "),n("th",[t._v("最差时间复杂度")]),t._v(" "),n("th",[t._v("空间复杂度")]),t._v(" "),n("th",[t._v("稳定性")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("冒泡排序")]),t._v(" "),n("td",[t._v("n")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("yes")])]),t._v(" "),n("tr",[n("td",[t._v("插入排序")]),t._v(" "),n("td",[t._v("n")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("yes")])]),t._v(" "),n("tr",[n("td",[t._v("选择排序")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("no")])]),t._v(" "),n("tr",[n("td",[t._v("二叉树排序")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("yes")])]),t._v(" "),n("tr",[n("td",[t._v("快速排序")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("$logn$~n")]),t._v(" "),n("td",[t._v("no")])]),t._v(" "),n("tr",[n("td",[t._v("堆排序")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("no")])]),t._v(" "),n("tr",[n("td",[t._v("希尔排序")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("$n^2$")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("no")])])])]),t._v(" "),n("h3",{attrs:{id:"查找算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查找算法"}},[t._v("#")]),t._v(" 查找算法")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("查找算法")]),t._v(" "),n("th",[t._v("平均时间复杂度")]),t._v(" "),n("th",[t._v("查找条件")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("顺序查找")]),t._v(" "),n("td",[t._v("n")]),t._v(" "),n("td",[t._v("无序或有序队列")])]),t._v(" "),n("tr",[n("td",[t._v("二分查找(折半查找)")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("有序数组")])]),t._v(" "),n("tr",[n("td",[t._v("二叉排序树查找")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("二叉排序树")])]),t._v(" "),n("tr",[n("td",[t._v("哈希表法(散列表)")]),t._v(" "),n("td",[t._v("1")]),t._v(" "),n("td",[t._v("先创建哈希表(散列表)")])]),t._v(" "),n("tr",[n("td",[t._v("分块查找")]),t._v(" "),n("td",[t._v("$nlogn$")]),t._v(" "),n("td",[t._v("无序或有序队列")])])])]),t._v(" "),n("h3",{attrs:{id:"列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),n("p",[t._v("关键词：元素，空列表\n特点：元素不多，不适合查找排序运算，一种最自然的数据组织方式\n现实中例子：购物清淡 待办事项列表\n迭代器的优点：\n1. 访问元素不必关心底层数据结构；\n2. 增加删除元素比for灵活；\n3. 访问列表里的元素提供了统一的方法")]),t._v(" "),n("h3",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),n("ul",[n("li",[t._v("查找")])]),t._v(" "),n("h3",{attrs:{id:"二分法查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二分法查找"}},[t._v("#")]),t._v(" 二分法查找")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 二分法查找\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" mid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("binarySearch")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);