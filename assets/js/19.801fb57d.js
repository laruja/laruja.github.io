(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{263:function(t,o,r){"use strict";r.r(o);var n=r(28),e=Object(n.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"function"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#function"}},[t._v("#")]),t._v(" function")]),t._v(" "),r("ol",[r("li",[t._v("函数是对象？\nprototype."),r("strong",[t._v("proto")]),t._v("===Object.prototype [函数有prototype,对象只有__proto__]")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('// 函数 & 对象\nvar testF = function () { console.log("函数 & 对象") }\nvar obj = new Object();\nvar arr = new Array();\ntestF.constructor === Function\ntestF.constructor === Function.prototype.constructor\nobj.constructor === Object\narr.constructor ===Array\n// 函数testF的prototype是它自己 prototype的constructor是testF它自己\ntestF.prototype.constructor === testF\ntestF.__proto__ === Function.prototype\nFunction.prototype.__proto__ === Object.prototype\nobj.__proto__ === Object.prototype\nobj.__proto__.__proto__ === null\nObject.__proto__ === Function.prototype\n\narr.__proto__ === Array.prototype\narr.__proto__.__proto__ === Object.prototype\n\n')])])]),r("p",[r("img",{attrs:{src:"img/function1.png",alt:"function"}}),t._v(" "),r("img",{attrs:{src:"img/object1.png",alt:"object"}})])])}),[],!1,null,null,null);o.default=e.exports}}]);