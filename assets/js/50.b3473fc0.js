(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{293:function(t,n,a){"use strict";a.r(n);var s=a(28),r=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"dart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dart"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://flutter.dev/docs/resources/bootstrap-into-dart",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dart"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://dart.dev/guides/language/language-tour",target:"_blank",rel:"noopener noreferrer"}},[t._v("基础"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("练习环境--vscode(已安装Dart插件)，测试文件当前目录下终端运行：dart run xxx.dart\n终端直接输入dart 报错:zsh: command not found: dart\n原因：安装flutter时捆绑了dart\n"),a("a",{attrs:{href:"https://dart.ranyunlong.com/guide/#mac%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装dart"),a("OutboundLink")],1)])]),t._v(" "),a("ol",[a("li",[t._v("brew tap dart-lang/dart")]),t._v(" "),a("li",[t._v("brew install dart"),a("br"),t._v("\n#报错 独立运行dart文件暂停，截止到目前20200710本机运行dart文件需要启动flutter\n#准备面试")])]),t._v(" "),a("p",[t._v("奇技淫巧：dart路径在flutterSDK的/bin/cache/dart-sdk目录下，")]),t._v(" "),a("ol",[a("li",[t._v("echo $PATH 环境变量中查找dart  没有")]),t._v(" "),a("li",[t._v("需要配置dart环境变量")])]),t._v(" "),a("div",{staticClass:"language-powershell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-powershell"}},[a("code",[t._v("$ vim ~"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_profile "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#添加如下")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dart")]),t._v("\nexport DART_HOME=~"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("flutter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cache"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dart"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sdk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin\nexport PATH="),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${DART_HOME}:${PATH}"')]),t._v("\n$ source ~"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bash_profile "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 刷新当前终端窗口")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PATH")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看dart是否存在PATH中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("无效\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##### [实用基础](https://book.flutterchina.club/chapter1/dart.html)")]),t._v("\n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" 变量与类型\n    基本类型：bool num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int double"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" string enum\n    泛型：list map "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("类似js中数组和对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v("接受任何类型的变量，一旦赋值无法改变类型\n    dynamic编辑器会提供所有可能的组合。后期可以改变赋值类型，声明的变量可以赋值给任意类型的变量\n        dynamic f = true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("编译时不报错，运行时报错\n    object所有对象的基类，只能使用Object属性与方法。后期可以改变赋值类型，声明的变量可以赋值给任意类型的变量\n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" 控制流语句\n```dart\n<"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 条件判断\ndebug模式下只接受bool类型值，release模式下接受任意类型值，都认为时false "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(">\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n<"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" 同其他语言 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(">\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("\nList<int> arr = "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int n in arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("int i=0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i<arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i+"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("[i]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nint n=0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n<arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    n+"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v("\n<"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("跳转语句 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(">\nbool isBoy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Person person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        case Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boy:print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v(" Label_case"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        case Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("girl:"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Label_case:case Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boy:print"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'第二次执行'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        default:"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("函数\n箭头函数 int add(int a,int b)=>a+b;print(add(1,2));\n可选位置参数，int add(int a,[int b])=>a+b;print(add(1));\n可选命名参数  int add(int a,{int b})=>a+b;print(add(1,b:2));")])]),t._v(" "),a("li",[a("p",[t._v("类\nclass 构造函数,无析构函数[有自己的虚拟机可以实现垃圾回收]\nclass Tool{\nint num;\nString name;\nTool(int num,String name){\nthis.num = num;\nthis.name = name;\n}\n"),t._v(" "),t._v("\nTool.fromTool(List"),a("dynamic",[t._v(" arr){\nnum = arr[0];\nname = arr[1];\n}\n"),t._v("\nTool.toTool(int num,String name):this(num,name);\nString getName(){\nreturn name;\n}\n}\n使用\nTool a = new Tool(1,'one');\nprint(a.getName);\n使用命名构造函数\nTool b = new Tool.fromTool([1,'one']);\nprint(b.getName);")])],1)]),t._v(" "),a("li",[a("p",[t._v("继承与多态\n继承一个基类 extends\n调用基类的方法 super\n不能实现多继承\nclass Child extends Tool{\nChild(int num,String name):super(num,name);\n@override\nString getName(){return 'www'}\n}\n多态 类似于其他语言")])]),t._v(" "),a("li",[a("p",[t._v("抽象类与接口\n抽象类\nabstract class Tool{\nString getName();\nString getString(){\nreturn 'www';\n}\n}\n派生类继承抽象类\nclass Child extends Tool{\n@override\nString getName(){\nreturn 'one';\n}\n}\n使用\nTool a = new Child();\nprint(a.getName());\n静态权限\n下划线开头的符号_ 包内可见")])]),t._v(" "),a("li",[a("p",[t._v("异步\n关键字 Future Async await\nimplements\n异步运算async -> 延迟队列await -> 等待结果Future\ngetAsyncData(String data) async{\nprint('开始');\ndata = await Future.delayed(Duration(seconds:2),(){\nreturn '延迟数据';\n});\nprint(data);\n}\nFuture 返回future类型\nFuture"),a("String",[t._v(" getAsyncData(String data) async{\nprint('开始');\ndata = await Future.delayed(Duration(seconds:2),(){\nreturn '延迟数据';\n});\nreturn data;\n}\nFuture"),a("String",[t._v(" res = getAsyncData();\nres.then((data){\nprint(data);\n})\n错误捕获\nFuture"),a("String",[t._v(" getAsyncData(String data) async{\nprint('开始');\nreturn await Future.delayed(Duration(seconds:2),(){\nthrow AssertionError(\"Error\");\n});\n}\nFuture"),a("String",[t._v(" res = getAsyncData();")])],1)],1)],1)],1),t._v(" "),a("p",[t._v("res.then((data){\nprint(data);\n}).catchError(err){\nprint(err);\n}\nres.then((data){\nprint(data);\n},onError:(err){\nprint('代码错误');\n});")]),t._v(" "),a("p",[t._v("whenComplete 无论成功失败都会调用\n等待多个任务\n执行多个异步\nFuture.wait([\nFuture.delayed(Duration(seconds:2),(){\nprint('1');\nreutrn 1;\n}),\nFuture.delayed(Duration(seconds:2),(){\nprint('1');\nreturn 2\n})\n]).then((res){\nprint(res[0]);\nprint(res[1]);\n})")])])]),t._v(" "),a("h5",{attrs:{id:"官网翻译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官网翻译"}},[t._v("#")]),t._v(" 官网翻译")]),t._v(" "),a("h3",{attrs:{id:"核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("可以放入变量中的所有内容都是一个对象，而每个对象都是一个类的实例。偶数、函数和null都是对象。所有对象都继承自对象类。")])]),t._v(" "),a("li",[a("p",[t._v("尽管Dart是强类型的，但类型注释是可选的，因为Dart可以推断类型。在上面的代码中，number被推断为int类型。如果要显式地声明不需要类型，请使用特殊类型dynamic。")])]),t._v(" "),a("li",[a("p",[t._v("Dart支持泛型类型，如List"),a("int",[t._v("（整数列表）或List"),a("dynamic",[t._v("（任何类型的对象列表）。")])],1)],1)]),t._v(" "),a("li",[a("p",[t._v("Dart支持顶级函数（如main（）），也支持绑定到类或对象的函数（分别是静态方法和实例方法）。也可以在函数（嵌套函数或局部函数）中创建函数。")])]),t._v(" "),a("li",[a("p",[t._v("类似地，Dart支持顶级变量，以及绑定到类或对象的变量（静态变量和实例变量）。实例变量有时称为字段或属性。")])]),t._v(" "),a("li",[a("p",[t._v("与Java不同，Dart没有public、protected和private关键字。如果标识符以下划线（U）开头，则它对其库是私有的。有关详细信息，请参见库和可见性。")])]),t._v(" "),a("li",[a("p",[t._v("标识符可以以字母或下划线（U）开头，后跟这些字符和数字的任意组合。")])]),t._v(" "),a("li",[a("p",[t._v("Dart有表达式（有运行时值）和语句（没有）。例如，条件表达式条件？expr1:expr2的值为expr1或expr2。将其与if-else语句进行比较，后者没有值。语句通常包含一个或多个表达式，但表达式不能直接包含语句。")])]),t._v(" "),a("li",[a("p",[t._v("Dart工具可以报告两种类型的问题：警告和错误。警告只是表示代码可能无法工作，但不会阻止程序执行。错误可以是编译时的，也可以是运行时的。编译时错误会阻止代码执行；运行时错误会导致在代码执行时引发异常。")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);