(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{261:function(n,e,o){"use strict";o.r(e);var t=o(28),r=Object(t.a)({},(function(){var n=this,e=n.$createElement,o=n._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h1",{attrs:{id:"es6"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[n._v("#")]),n._v(" ES6+")]),n._v(" "),o("ul",[o("li",[n._v("es6  ECMAScript2015")]),n._v(" "),o("li",[n._v("es7  ECMAScript2016 增加数组include(), Math.pow的简写语法**")]),n._v(" "),o("li",[n._v("es8  ECMAScript2017 在异步操作、Object、String能力上做了进一步增强，让代码编写更加效率")]),n._v(" "),o("li",[n._v("es9  ECMAScript2018 主要解决了遍历中异步、异步的归一操作等问题，\n也提供了对象的拷贝、筛选功能\n提升正则的处理能力")]),n._v(" "),o("li",[n._v("es10 ECMAScript2019 无大幅改动\nJSON问题修复，数组、字符串、对象、函数等能力进一步增强\n新增BigInt数据类型")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('// es7\nconst arr = [1,2,3];\narr.indexOf(2)\narr.include(4)\n\nMath.pow(2,3)\n2**3\n\n// es8\n/**async await更加语义化\n与同步迭代器区别是返回 next => Promise\n\n操作异步代码\n1.嵌套回调\n2.Promise\n3.Generators\n4.async await\n*/\nasync function fn(){\n    await Promise.resolve();\n}\n\nasync function add(num){\n    const a = 1;\n    return num + a;\n}\nconsole.log(add(2));\nadd(2).then(res=>{\n    console.log(res);\n});\n\nfunction promiseFn(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            resolve("resolve");\n           // reject("错误信息");\n        },1500);\n    });\n}\n// 1 捕获异常的另一种方法 \nasync function fn(){\n    try{\n        await promiseFn();\n        console.log("错误下不会执行");\n    }catch(err){\n        console.log(err);\n    }\n}\n// 2 捕获异常的另一种方法 \nasync function fn(){\n    await promiseFn();\n    console.log("错误下不会执行");\n}\nfn().catch(err=>{\n    console.log(err)\n});\n// 3 捕获异常下面代码可以执行 截留\nasync function fn(){\n    await promiseFn().catch(err=>{\n        console.log(err);\n    });\n    console.log("错误下会执行");\n}\nfn();\n\n// 多个await异步命令\nfunction promiseFn1(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            resolve("resolve");\n           // reject("错误信息");\n        },1500);\n    });\n}\nfunction promiseFn2(){\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            resolve("resolve");\n           // reject("错误信息");\n        },2000);\n    });\n}\nasync function fn1(){\n    console.time("fn1");\n    let res1 = await promiseFn1();\n    let res2 = await promiseFn2();\n    console.timeEnd("fn1");\n}\nfn1();\n// promise.all() 同时执行\nasync function fn2(){\n    console.time("fn2");\n    let [res1,res2] = await Promise.all([promiseFn1(),promiseFn2()]) ;\n    console.timeEnd("fn2");\n}\nfn2();\n// Object.values() vs Object.keys()\n//只包含自身值，不包含继承来的值...没验证\nconst obj = {name:"lrj",age:"18"};\nconsole.log(Object.keys(obj).map(key=>obj[key]));\nconsole.log(Object.values(obj));\n\n//Object.entries() vs for...in(会枚举原型链中的属性)\nconst obj = {name:"lrj",age:"18"};\nconsole.log(Object.entries(obj));\nconsole.log(Object.entries("lrj"));//非对象强制转化成对象\n//遍历对象键值\nfor(const [key,value] of Object.entries(obj)){\n    console.log(`${key}-${value}`);\n}\nObject.entries(obj).forEach([key,value]=>{\n    console.log(`${key}-${value}`);\n});\n\n// String Padding\n//1. String.prototype.padStart(targetLength,[padString]) 字符串开头结尾添加\n//2. String.prototype.padEnd\nconsole.log(\'abc\'.padStart(4,"d"))\nconsole.log(\'abc\'.padStart(5,"🍎"))\nconsole.log(\'abc\'.padStart(7,"🍎"))\n//es8结尾允许逗号 如版本检测很实用\nfunction fn(\n    para1,\n    para2,\n){\n    console.log(para1, para2);\n}\nfn(1,2);\n\nlet obj={\n    n:\'\',\n    n:\'\',\n}\n// Object.getOwnPropertyDescriptors();\nconst obj = {\n    name:"lrj",\n    get fn(){\n        return "fn";\n    }\n};\nconsole.log(Object.getOwnPropertyDescriptors(obj));\n//!!!!!!! SharedArrayBuffer 与 Atomics\n //js单线程，而这两个共享内存和原子操作可以实现多线程\n //高级特效 js引擎核心改进\n //提高代码性能 高并发\n //共享内存主要思想：把多线程引入js\n // 新的全局对象 SharedArrayBuffer,\n    // js主线程、web-worker线程可共享内存。使得数据传输更快\n    // 之前用postMessage()不同线程之间进行数据传递\n   //带来的问题：多线程竞争，=>解决办法Atomics加锁 \n\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);